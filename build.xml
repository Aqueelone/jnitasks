<?xml version="1.0" encoding="UTF-8"?>

<project name="JNITasks" default="all" basedir=".">
	<property environment="env" />
	
	<!-- Project Settings -->
	<property file="build.num" />
	<property name="ant.build.javac.compiler" value="modern" />
	<property name="ant.build.javac.source" value="1.5" />
	<property name="ant.build.javac.target" value="1.5" />
	<property name="ant.build.debug" value="true" />

	<property name="ant.project.vendor" 	value="Alexander Barker (alex@1stleg.com)" />
	<property name="ant.project.version"	value="${build.major}.${build.minor}.${build.revision}" />

	<!-- Path Settings -->
	<property name="dir.src"	value="${basedir}${file.separator}src" />
	<property name="dir.test"	value="${basedir}${file.separator}test" />
	<property name="dir.doc"	value="${basedir}${file.separator}doc" />
	<property name="dir.jar"	value="${basedir}${file.separator}jar" />
	<property name="dir.dist"	value="${basedir}${file.separator}dist" />
	<property name="dir.bin"	value="${basedir}${file.separator}bin" />

	<!-- Class Path Settings -->
	<!-- NOTE Gentoo requires `CLASSPATH="$(java-config -p ant-junit,junit-4)" ant test` -->
	<path id="project.class.path">
		<!-- pathelement location="${dir.bin}/java" /-->
		<!-- pathelement location="${dir.bin}/test" /-->
		<pathelement location="${dir.jar}" />
		
		<pathelement path="${java.class.path}" />
	</path>
	
	<target name="clean" description="Removes generated bytecode and object files.">
		<echo>Cleaning build structure...</echo>

		<delete includeEmptyDirs="true" verbose="true" failonerror="false">
			<fileset dir="${dir.bin}" includes="**/*" />
		</delete>
	</target>


	<target name="compile" depends="compile-src,compile-test" description="Compiles Java source files."/>

	<target name="compile-src" description="Compiles Java source files.">
		<echo>Compiling Java source...</echo>
		<mkdir dir="${dir.bin}/java" />
		
		<javac
			compiler="${ant.build.javac.compiler}"
			destdir="${dir.bin}"
			bootclasspath="${java.bootclasspath}"
			debug="${ant.build.debug}"
			debuglevel="lines,vars,source"
			optimize="${project.optimize}"
			deprecation="false"
			includeantruntime="false"
			listfiles="true"
			verbose="false"
		>
			<src path="${dir.src}" />

			<classpath refid="project.class.path" />
			<bootclasspath path="${java.bootclasspath}" />
		</javac>
	</target>
	
	<target name="compile-test" description="Compiles Java source files.">
		<echo>Compiling JUnit source...</echo>
		<mkdir dir="${dir.bin}/test" />

		<javac
			compiler="${ant.build.javac.compiler}"
			destdir="${dir.bin}"
			debug="${ant.build.debug}"
			debuglevel="lines,vars,source"
			optimize="${project.optimize}"
			deprecation="false"
			includeantruntime="false"
			listfiles="true"
			verbose="false"
		>
			<src path="${dir.test}" />

			<classpath refid="project.class.path" />
			<bootclasspath path="${java.bootclasspath}" />

			<compilerarg value="-Xlint:unchecked" />
		</javac>
	</target>


	<target name="test" depends="compile-test" description="Perform JUnit tests.">
		<echo>Performing JUnit tests...</echo>
		<junit fork="true" printsummary="true" haltonerror="true">
			<jvmarg value="-Djava.library.path=${dir.lib}/${native.os}/${native.arch}" />

			<classpath refid="project.class.path" />

			<formatter type="brief" usefile="false" />
			<!-- test name="TestExample" / -->
			<batchtest> <!-- todir="${reports.tests}" -->
				<fileset dir="${dir.test}">
					<include name="**/*Test.java"/>
				</fileset>
			</batchtest>
		</junit>
	</target>


	<target name="jar" description="Creates the jar library.">
		<echo>Copying libs...</echo>
		<mkdir dir="${dir.bin}/class/java/org/jnativehook/lib" />
		<copy overwrite="true" todir="${dir.bin}/class/java/org/jnativehook/lib">
			<fileset dir="${dir.lib}" includes="**/*" />
		</copy>

		<echo>Creating ${ant.project.name}.jar...</echo>
		<mkdir dir="${dir.jar}" />
		<jar jarfile="${dir.jar}/${project.name}.jar" basedir="${dir.bin}/class/java">
			<include name="org/jnativehook/**" />
			<!-- <exclude name="org/jnativehook/example/NativeHookDemo.class" /> -->
			<manifest>
				<attribute name="Main-Class" value="org.jnativehook.example.NativeHookDemo" />
				<section name="org/jnativehook">
					<attribute name="Implementation-Title" value="${project.name} Library" />
					<attribute name="Implementation-Version" value="${project.version}" />
					<attribute name="Implementation-Vendor" value="${project.vendor}" />
				</section>
			</manifest>
		</jar>
	</target>


	<target name="run" description="Execute the bundled example.">
		<java classname="org.jnativehook.example.NativeHookDemo" fork="true" failonerror="true">
			<jvmarg value="-Djava.library.path=${dir.lib}/${native.os}/${native.arch}" />
			<classpath>
				<pathelement location="${dir.jar}/${project.name}.jar" />
				<pathelement path="${dir.bin}/class/java" />
				<pathelement path="${java.class.path}" />
			</classpath>
		</java>
	</target>


	<target name="javadoc" description="Generates javadoc api documentation.">
		<echo level="info">Generating API Documenation...</echo>
		<mkdir dir="${dir.doc}" />

		<javadoc destdir="${dir.doc}" windowtitle="${project.name}" author="true" version="true" use="true">
			<packageset dir="${dir.src}/java" defaultexcludes="yes">
				<include name="org/jnativehook/**" />
				<exclude name="org/jnativehook/example/**" />
			</packageset>

			<doctitle><![CDATA[<h1>${project.name} API Documentation</h1>]]></doctitle>
			<bottom><![CDATA[<i>Copyright &#169; 2006-2013 ${project.vendor}. All Rights Received.</i>]]></bottom>

			<!--
			<tag name="to.do" scope="all" description="To Do:" />
			<tag name="fix.me" scope="all" description="Fix Needed:" />
			-->

			<link href="http://download.oracle.com/javase/1.5.0/docs/api/" />
		</javadoc>
	</target>


	<target name="package" depends="jar,javadoc" description="Creates zip files for distribution.">
		<!-- Copy Files To Dist Locations -->
		<echo>Creating Distribution Archive...</echo>
		<mkdir dir="${dir.dist}" />

		<zip destfile="${dir.dist}/${project.name}-${project.version}.zip" duplicate="add" level="9">
			<zipfileset dir="${dir.jar}" prefix="${project.name}/jar">
				<include name="*.jar" />
			</zipfileset>

			<zipfileset dir="${basedir}" prefix="${project.name}">
				<include name="license*.txt" />
				<include name="readme.txt" />
			</zipfileset>
		</zip>

		<zip destfile="${dir.dist}/${project.name}-doc-${project.version}.zip" duplicate="add" level="9">
			<zipfileset dir="${dir.doc}" prefix="${project.name}/doc">
				<exclude name="**/.*" />
			</zipfileset>
		</zip>

		<zip destfile="${dir.dist}/${project.name}-src-${project.version}.zip" duplicate="add" level="9">
			<zipfileset dir="${basedir}" prefix="${project.name}">
				<exclude name="**/.*" />

				<include name="*.txt" />
				<include name="build.*" />
				<exclude name="build.properties*" />
			</zipfileset>

			<zipfileset dir="${dir.src}" prefix="${project.name}/src">
				<exclude name="**/.*" />

				<exclude name="native/jni/org_jnativehook_GlobalScreen.h" />
			</zipfileset>
		</zip>

		<!-- Increment and write out the build numbers
		<propertyfile file="build.num" comment="Build Number for ANT. Do not edit!">
			<entry key="build.major" type="int" value="${build.major}" />
			<entry key="build.minor" type="int" value="${build.minor}" />
			<entry key="build.revision" type="int" value="1" operation="+" />
		</propertyfile>
		 -->
	</target>


	<target name="all" depends="compile,jar" description="Compile all source files and create the jar library.">
	</target>
</project>
